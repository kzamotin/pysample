<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="5" skipped="0" tests="18" time="0.227" timestamp="2020-12-04T15:48:28.361885" hostname="scc-107-05"><testcase classname="tests.test_simple" name="test_makeWallet" time="0.004" /><testcase classname="tests.test_simple" name="test_makeEmptyWallet" time="0.002" /><testcase classname="tests.test_simple" name="test_addMoney" time="0.002" /><testcase classname="tests.test_simple" name="test_makePayment" time="0.002" /><testcase classname="tests.test_simple" name="test_makeNotEmptyWallet" time="0.002"><failure message="assert 0 &lt; 0&#10; +  where 0 = &lt;bound method Wallet.balance of &lt;walletClass.Wallet object at 0x00000000035715E0&gt;&gt;()&#10; +    where &lt;bound method Wallet.balance of &lt;walletClass.Wallet object at 0x00000000035715E0&gt;&gt; = &lt;walletClass.Wallet object at 0x00000000035715E0&gt;.balance">def test_makeNotEmptyWallet():
        A=Wallet(-1)
&gt;       assert A.balance() &lt; 0
E       assert 0 &lt; 0
E        +  where 0 = &lt;bound method Wallet.balance of &lt;walletClass.Wallet object at 0x00000000035715E0&gt;&gt;()
E        +    where &lt;bound method Wallet.balance of &lt;walletClass.Wallet object at 0x00000000035715E0&gt;&gt; = &lt;walletClass.Wallet object at 0x00000000035715E0&gt;.balance

tests\test_simple.py:32: AssertionError</failure></testcase><testcase classname="tests.test_simple" name="test_makePaymentMoreThatWallet" time="0.001"><failure message="assert -3 &gt;= 0&#10; +  where -3 = &lt;bound method Wallet.balance of &lt;walletClass.Wallet object at 0x0000000003586460&gt;&gt;()&#10; +    where &lt;bound method Wallet.balance of &lt;walletClass.Wallet object at 0x0000000003586460&gt;&gt; = &lt;walletClass.Wallet object at 0x0000000003586460&gt;.balance">def test_makePaymentMoreThatWallet():
    
        A=Wallet(10)
        B=Wallet(2)
        B.makePayment(A,5)
&gt;       assert B.balance() &gt;= 0
E       assert -3 &gt;= 0
E        +  where -3 = &lt;bound method Wallet.balance of &lt;walletClass.Wallet object at 0x0000000003586460&gt;&gt;()
E        +    where &lt;bound method Wallet.balance of &lt;walletClass.Wallet object at 0x0000000003586460&gt;&gt; = &lt;walletClass.Wallet object at 0x0000000003586460&gt;.balance

tests\test_simple.py:40: AssertionError</failure></testcase><testcase classname="tests.test_simple" name="test_makeWrongPayment" time="0.001"><failure message="assert False">def test_makeWrongPayment():
        A=Wallet(10)
        B=Wallet(2)
        try:
&gt;           B.makePayment(A,'asd')

tests\test_simple.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;walletClass.Wallet object at 0x0000000003591490&gt;
wallet = &lt;walletClass.Wallet object at 0x00000000035919D0&gt;, amount = 'asd'

    def makePayment(self, wallet, amount):
&gt;       self.__amount -= amount
E       TypeError: unsupported operand type(s) for -=: 'int' and 'str'

tests\walletClass.py:9: TypeError

During handling of the above exception, another exception occurred:

    def test_makeWrongPayment():
        A=Wallet(10)
        B=Wallet(2)
        try:
            B.makePayment(A,'asd')
    
        except Exception:
&gt;           assert False
E           assert False

tests\test_simple.py:50: AssertionError</failure></testcase><testcase classname="tests.test_simple" name="test_makeLoopPayment" time="0.001"><failure message="assert 109 == 110&#10;  +109&#10;  -110">def test_makeLoopPayment():
        A=Wallet(10)
        for i in range(1,100):
            A.addMoney(1)
&gt;       assert A.balance() == 110
E       assert 109 == 110
E         +109
E         -110

tests\test_simple.py:56: AssertionError</failure></testcase><testcase classname="tests.test_simple" name="test_makeLoopBackPayment" time="0.001" /><testcase classname="tests.test_simple" name="test_makeWrongAddMoney" time="0.001"><failure message="assert 9 == 10&#10;  +9&#10;  -10">def test_makeWrongAddMoney():
        A=Wallet(10)
        A.addMoney(-1)
&gt;       assert A.balance() == 10
E       assert 9 == 10
E         +9
E         -10

tests\test_simple.py:67: AssertionError</failure></testcase><testcase classname="tests.test_simple" name="test_cross_params[1-10]" time="0.002" /><testcase classname="tests.test_simple" name="test_cross_params[1-20]" time="0.002" /><testcase classname="tests.test_simple" name="test_cross_params[3-10]" time="0.002" /><testcase classname="tests.test_simple" name="test_cross_params[3-20]" time="0.001" /><testcase classname="tests.test_simple" name="test_cross_params[5-10]" time="0.001" /><testcase classname="tests.test_simple" name="test_cross_params[5-20]" time="0.002" /><testcase classname="tests.test_simple" name="test_cross_params[10-10]" time="0.002" /><testcase classname="tests.test_simple" name="test_cross_params[10-20]" time="0.001" /></testsuite></testsuites>